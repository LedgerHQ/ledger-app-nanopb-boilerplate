/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0-dev at Tue May 21 16:09:25 2019. */

#ifndef PB_LEDGERVAULT_VAULT_PB_H_INCLUDED
#define PB_LEDGERVAULT_VAULT_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _ledgervault_User_Type {
    ledgervault_User_Type_PSD = 0,
    ledgervault_User_Type_ORACLE = 1
} ledgervault_User_Type;
#define _ledgervault_User_Type_MIN ledgervault_User_Type_PSD
#define _ledgervault_User_Type_MAX ledgervault_User_Type_ORACLE
#define _ledgervault_User_Type_ARRAYSIZE ((ledgervault_User_Type)(ledgervault_User_Type_ORACLE+1))

typedef enum _ledgervault_User_Role {
    ledgervault_User_Role_OPERATOR = 0,
    ledgervault_User_Role_ADMIN = 1,
    ledgervault_User_Role_SHARED_OWNER = 2
} ledgervault_User_Role;
#define _ledgervault_User_Role_MIN ledgervault_User_Role_OPERATOR
#define _ledgervault_User_Role_MAX ledgervault_User_Role_SHARED_OWNER
#define _ledgervault_User_Role_ARRAYSIZE ((ledgervault_User_Role)(ledgervault_User_Role_SHARED_OWNER+1))

typedef enum _ledgervault_CurrencyScriptType {
    ledgervault_CurrencyScriptType_BTC = 0,
    ledgervault_CurrencyScriptType_ETH = 1
} ledgervault_CurrencyScriptType;
#define _ledgervault_CurrencyScriptType_MIN ledgervault_CurrencyScriptType_BTC
#define _ledgervault_CurrencyScriptType_MAX ledgervault_CurrencyScriptType_ETH
#define _ledgervault_CurrencyScriptType_ARRAYSIZE ((ledgervault_CurrencyScriptType)(ledgervault_CurrencyScriptType_ETH+1))

typedef enum _ledgervault_AccountRuleType {
    ledgervault_AccountRuleType_MULTISIG = 0,
    ledgervault_AccountRuleType_RATE_LIMITER = 1,
    ledgervault_AccountRuleType_WHITE_LIST = 2,
    ledgervault_AccountRuleType_THRESHOLD = 3
} ledgervault_AccountRuleType;
#define _ledgervault_AccountRuleType_MIN ledgervault_AccountRuleType_MULTISIG
#define _ledgervault_AccountRuleType_MAX ledgervault_AccountRuleType_THRESHOLD
#define _ledgervault_AccountRuleType_ARRAYSIZE ((ledgervault_AccountRuleType)(ledgervault_AccountRuleType_THRESHOLD+1))

typedef enum _ledgervault_Status {
    ledgervault_Status_EXISTING = 0,
    ledgervault_Status_ADD = 1,
    ledgervault_Status_REMOVE = 2
} ledgervault_Status;
#define _ledgervault_Status_MIN ledgervault_Status_EXISTING
#define _ledgervault_Status_MAX ledgervault_Status_REMOVE
#define _ledgervault_Status_ARRAYSIZE ((ledgervault_Status)(ledgervault_Status_REMOVE+1))

/* Struct definitions */
typedef struct _ledgervault_OperatorUpdate {
    pb_bytes_array_t *wOperator;
    ledgervault_Status status;
/* @@protoc_insertion_point(struct:ledgervault_OperatorUpdate) */
} ledgervault_OperatorUpdate;

/* Default values for struct fields */

/* Initializer values for message structs */
#define ledgervault_OperatorUpdate_init_default  {NULL, (ledgervault_Status)0}
#define ledgervault_OperatorUpdate_init_zero     {NULL, (ledgervault_Status)0}

/* Field tags (for use in manual encoding/decoding) */
#define ledgervault_OperatorUpdate_wOperator_tag 1
#define ledgervault_OperatorUpdate_status_tag    2

/* Struct field encoding specification for nanopb */
extern const pb_field_t ledgervault_OperatorUpdate_fields[3];

/* Maximum encoded size of messages (where known) */
/* ledgervault_OperatorUpdate_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define VAULT_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
