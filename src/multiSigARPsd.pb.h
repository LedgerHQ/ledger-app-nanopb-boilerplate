/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0-dev at Tue May 21 16:09:25 2019. */

#ifndef PB_LEDGERVAULT_PSD_MULTISIGARPSD_PB_H_INCLUDED
#define PB_LEDGERVAULT_PSD_MULTISIGARPSD_PB_H_INCLUDED
#include <pb.h>

#include "psd.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _ledgervault_psd_MultiSigAR {
    pb_size_t groups_count;
    struct _ledgervault_psd_MultiSigOperatorGroup *groups;
/* @@protoc_insertion_point(struct:ledgervault_psd_MultiSigAR) */
} ledgervault_psd_MultiSigAR;

typedef struct _ledgervault_psd_MultiSigOperatorGroup_InternalOperatorGroup {
    pb_size_t users_count;
    struct _ledgervault_psd_User *users;
/* @@protoc_insertion_point(struct:ledgervault_psd_MultiSigOperatorGroup_InternalOperatorGroup) */
} ledgervault_psd_MultiSigOperatorGroup_InternalOperatorGroup;

typedef struct _ledgervault_psd_MultiSigOperatorGroup_ExternalOperatorGroup {
    char *name;
    uint32_t N;
/* @@protoc_insertion_point(struct:ledgervault_psd_MultiSigOperatorGroup_ExternalOperatorGroup) */
} ledgervault_psd_MultiSigOperatorGroup_ExternalOperatorGroup;

typedef struct _ledgervault_psd_MultiSigOperatorGroup {
    uint32_t M;
    uint32_t MNew;
    pb_size_t which_one;
    union {
        ledgervault_psd_MultiSigOperatorGroup_InternalOperatorGroup internalGroup;
        ledgervault_psd_MultiSigOperatorGroup_ExternalOperatorGroup externalGroup;
    };
/* @@protoc_insertion_point(struct:ledgervault_psd_MultiSigOperatorGroup) */
} ledgervault_psd_MultiSigOperatorGroup;

/* Default values for struct fields */

/* Initializer values for message structs */
#define ledgervault_psd_MultiSigAR_init_default  {0, NULL}
#define ledgervault_psd_MultiSigOperatorGroup_init_default {0, 0, 0, {ledgervault_psd_MultiSigOperatorGroup_InternalOperatorGroup_init_default}}
#define ledgervault_psd_MultiSigOperatorGroup_ExternalOperatorGroup_init_default {NULL, 0}
#define ledgervault_psd_MultiSigOperatorGroup_InternalOperatorGroup_init_default {0, NULL}
#define ledgervault_psd_MultiSigAR_init_zero     {0, NULL}
#define ledgervault_psd_MultiSigOperatorGroup_init_zero {0, 0, 0, {ledgervault_psd_MultiSigOperatorGroup_InternalOperatorGroup_init_zero}}
#define ledgervault_psd_MultiSigOperatorGroup_ExternalOperatorGroup_init_zero {NULL, 0}
#define ledgervault_psd_MultiSigOperatorGroup_InternalOperatorGroup_init_zero {0, NULL}

/* Field tags (for use in manual encoding/decoding) */
#define ledgervault_psd_MultiSigAR_groups_tag    1
#define ledgervault_psd_MultiSigOperatorGroup_InternalOperatorGroup_users_tag 1
#define ledgervault_psd_MultiSigOperatorGroup_ExternalOperatorGroup_name_tag 1
#define ledgervault_psd_MultiSigOperatorGroup_ExternalOperatorGroup_N_tag 2
#define ledgervault_psd_MultiSigOperatorGroup_internalGroup_tag 3
#define ledgervault_psd_MultiSigOperatorGroup_externalGroup_tag 4
#define ledgervault_psd_MultiSigOperatorGroup_M_tag 1
#define ledgervault_psd_MultiSigOperatorGroup_MNew_tag 2

/* Struct field encoding specification for nanopb */
extern const pb_field_t ledgervault_psd_MultiSigAR_fields[2];
extern const pb_field_t ledgervault_psd_MultiSigOperatorGroup_fields[5];
extern const pb_field_t ledgervault_psd_MultiSigOperatorGroup_ExternalOperatorGroup_fields[3];
extern const pb_field_t ledgervault_psd_MultiSigOperatorGroup_InternalOperatorGroup_fields[2];

/* Maximum encoded size of messages (where known) */
/* ledgervault_psd_MultiSigAR_size depends on runtime parameters */
/* ledgervault_psd_MultiSigOperatorGroup_size depends on runtime parameters */
/* ledgervault_psd_MultiSigOperatorGroup_ExternalOperatorGroup_size depends on runtime parameters */
/* ledgervault_psd_MultiSigOperatorGroup_InternalOperatorGroup_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MULTISIGARPSD_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
