/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0-dev at Mon May 20 17:27:22 2019. */

#ifndef PB_LEDGERVAULT_COMMON_PB_H_INCLUDED
#define PB_LEDGERVAULT_COMMON_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _ledgervault_Bip32Path {
    pb_size_t pathElement_count;
    uint32_t pathElement[10];
/* @@protoc_insertion_point(struct:ledgervault_Bip32Path) */
} ledgervault_Bip32Path;

typedef PB_BYTES_ARRAY_T(72) ledgervault_Certificate_certificate_t;
typedef PB_BYTES_ARRAY_T(72) ledgervault_Certificate_signature_t;
typedef struct _ledgervault_Certificate {
    pb_byte_t codeHash[32];
    pb_byte_t attestationPub[65];
    ledgervault_Certificate_certificate_t certificate;
    ledgervault_Certificate_signature_t signature;
/* @@protoc_insertion_point(struct:ledgervault_Certificate) */
} ledgervault_Certificate;

typedef struct _ledgervault_LightVersionnedObject {
    uint32_t magic;
    bool has_id;
    pb_byte_t id[32];
    uint32_t version;
/* @@protoc_insertion_point(struct:ledgervault_LightVersionnedObject) */
} ledgervault_LightVersionnedObject;

typedef struct _ledgervault_LightVersionnedObjectRef {
    bool has_id;
    pb_byte_t id[32];
    uint32_t version;
    bool has_seen;
    bool seen;
/* @@protoc_insertion_point(struct:ledgervault_LightVersionnedObjectRef) */
} ledgervault_LightVersionnedObjectRef;

typedef struct _ledgervault_TrustedScript {
    char *name;
    pb_byte_t (*codeHash)[32];
    uint32_t version;
    struct _ledgervault_Certificate *certificate;
/* @@protoc_insertion_point(struct:ledgervault_TrustedScript) */
} ledgervault_TrustedScript;

typedef PB_BYTES_ARRAY_T(32) ledgervault_VersionnedObject_antiReplayReference_t;
typedef struct _ledgervault_VersionnedObject {
    uint32_t magic;
    bool has_id;
    pb_byte_t id[32];
    ledgervault_VersionnedObject_antiReplayReference_t antiReplayReference;
    uint32_t antiReplayValue;
/* @@protoc_insertion_point(struct:ledgervault_VersionnedObject) */
} ledgervault_VersionnedObject;

/* Default values for struct fields */

/* Initializer values for message structs */
#define ledgervault_VersionnedObject_init_default {0, false, {0}, {0, {0}}, 0}
#define ledgervault_LightVersionnedObjectRef_init_default {false, {0}, 0, false, 0}
#define ledgervault_LightVersionnedObject_init_default {0, false, {0}, 0}
#define ledgervault_Certificate_init_default     {{0}, {0}, {0, {0}}, {0, {0}}}
#define ledgervault_Bip32Path_init_default       {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define ledgervault_TrustedScript_init_default   {NULL, NULL, 0, NULL}
#define ledgervault_VersionnedObject_init_zero   {0, false, {0}, {0, {0}}, 0}
#define ledgervault_LightVersionnedObjectRef_init_zero {false, {0}, 0, false, 0}
#define ledgervault_LightVersionnedObject_init_zero {0, false, {0}, 0}
#define ledgervault_Certificate_init_zero        {{0}, {0}, {0, {0}}, {0, {0}}}
#define ledgervault_Bip32Path_init_zero          {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define ledgervault_TrustedScript_init_zero      {NULL, NULL, 0, NULL}

/* Field tags (for use in manual encoding/decoding) */
#define ledgervault_Bip32Path_pathElement_tag    1
#define ledgervault_Certificate_codeHash_tag     1
#define ledgervault_Certificate_attestationPub_tag 2
#define ledgervault_Certificate_certificate_tag  3
#define ledgervault_Certificate_signature_tag    4
#define ledgervault_LightVersionnedObject_magic_tag 1
#define ledgervault_LightVersionnedObject_id_tag 2
#define ledgervault_LightVersionnedObject_version_tag 4
#define ledgervault_LightVersionnedObjectRef_id_tag 1
#define ledgervault_LightVersionnedObjectRef_version_tag 2
#define ledgervault_LightVersionnedObjectRef_seen_tag 3
#define ledgervault_TrustedScript_name_tag       1
#define ledgervault_TrustedScript_codeHash_tag   2
#define ledgervault_TrustedScript_version_tag    3
#define ledgervault_TrustedScript_certificate_tag 4
#define ledgervault_VersionnedObject_magic_tag   1
#define ledgervault_VersionnedObject_id_tag      2
#define ledgervault_VersionnedObject_antiReplayReference_tag 3
#define ledgervault_VersionnedObject_antiReplayValue_tag 4

/* Struct field encoding specification for nanopb */
extern const pb_field_t ledgervault_VersionnedObject_fields[5];
extern const pb_field_t ledgervault_LightVersionnedObjectRef_fields[4];
extern const pb_field_t ledgervault_LightVersionnedObject_fields[4];
extern const pb_field_t ledgervault_Certificate_fields[5];
extern const pb_field_t ledgervault_Bip32Path_fields[2];
extern const pb_field_t ledgervault_TrustedScript_fields[5];

/* Maximum encoded size of messages (where known) */
#define ledgervault_VersionnedObject_size        80
#define ledgervault_LightVersionnedObjectRef_size 42
#define ledgervault_LightVersionnedObject_size   46
#define ledgervault_Certificate_size             249
#define ledgervault_Bip32Path_size               60
/* ledgervault_TrustedScript_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define COMMON_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
