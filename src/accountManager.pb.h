/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0-dev at Tue May 21 16:09:25 2019. */

#ifndef PB_LEDGERVAULT_ACCOUNTMANAGER_PB_H_INCLUDED
#define PB_LEDGERVAULT_ACCOUNTMANAGER_PB_H_INCLUDED
#include <pb.h>

#include "common.pb.h"

#include "error.pb.h"

#include "vault.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _ledgervault_ConvertObject_TargetType {
    ledgervault_ConvertObject_TargetType_CURRENCY = 0,
    ledgervault_ConvertObject_TargetType_MATCHER = 1
} ledgervault_ConvertObject_TargetType;
#define _ledgervault_ConvertObject_TargetType_MIN ledgervault_ConvertObject_TargetType_CURRENCY
#define _ledgervault_ConvertObject_TargetType_MAX ledgervault_ConvertObject_TargetType_MATCHER
#define _ledgervault_ConvertObject_TargetType_ARRAYSIZE ((ledgervault_ConvertObject_TargetType)(ledgervault_ConvertObject_TargetType_MATCHER+1))

/* Struct definitions */
typedef struct _ledgervault_ApproverResponse {
    pb_bytes_array_t *wApprover;
    pb_bytes_array_t *challengeResponse;
    pb_bytes_array_t *approverBlob;
/* @@protoc_insertion_point(struct:ledgervault_ApproverResponse) */
} ledgervault_ApproverResponse;

typedef struct _ledgervault_ApproversGroup {
    pb_size_t wApprovers_count;
    pb_bytes_array_t **wApprovers;
/* @@protoc_insertion_point(struct:ledgervault_ApproversGroup) */
} ledgervault_ApproversGroup;

typedef struct _ledgervault_ApproversGroupBlobs {
    pb_size_t approversBlob_count;
    struct _ledgervault_ApproverBlob *approversBlob;
/* @@protoc_insertion_point(struct:ledgervault_ApproversGroupBlobs) */
} ledgervault_ApproversGroupBlobs;

typedef struct _ledgervault_ApproversGroupResponses {
    pb_size_t approversResponse_count;
    struct _ledgervault_ApproverResponse *approversResponse;
/* @@protoc_insertion_point(struct:ledgervault_ApproversGroupResponses) */
} ledgervault_ApproversGroupResponses;

typedef struct _ledgervault_ConfirmEditAccount {
    pb_size_t approversGroupsResponses_count;
    struct _ledgervault_ApproversGroupResponses *approversGroupsResponses;
/* @@protoc_insertion_point(struct:ledgervault_ConfirmEditAccount) */
} ledgervault_ConfirmEditAccount;

typedef struct _ledgervault_ConfirmEditAccountResponse {
    pb_bytes_array_t *wPartition;
    pb_bytes_array_t *wWallet;
    pb_bytes_array_t *wAccount;
    pb_size_t wAccountRuleSet_count;
    pb_bytes_array_t **wAccountRuleSet;
    pb_bytes_array_t *wWalletAccountList;
/* @@protoc_insertion_point(struct:ledgervault_ConfirmEditAccountResponse) */
} ledgervault_ConfirmEditAccountResponse;

typedef struct _ledgervault_ConfirmEditGroup {
    pb_size_t approversGroupsResponses_count;
    struct _ledgervault_ApproversGroupResponses *approversGroupsResponses;
/* @@protoc_insertion_point(struct:ledgervault_ConfirmEditGroup) */
} ledgervault_ConfirmEditGroup;

typedef struct _ledgervault_ConfirmEditGroupResponse {
    pb_bytes_array_t *wGroup;
    pb_size_t keyBlob_count;
    pb_bytes_array_t **keyBlob;
/* @@protoc_insertion_point(struct:ledgervault_ConfirmEditGroupResponse) */
} ledgervault_ConfirmEditGroupResponse;

typedef struct _ledgervault_ConfirmEditPartition {
    pb_size_t approversGroupsResponses_count;
    struct _ledgervault_ApproversGroupResponses *approversGroupsResponses;
/* @@protoc_insertion_point(struct:ledgervault_ConfirmEditPartition) */
} ledgervault_ConfirmEditPartition;

typedef struct _ledgervault_ConfirmEditPartitionResponse {
    pb_bytes_array_t *wPartition;
    pb_size_t adminGroups_count;
    struct _ledgervault_ConfirmEditPartitionResponse_AdminGroup *adminGroups;
/* @@protoc_insertion_point(struct:ledgervault_ConfirmEditPartitionResponse) */
} ledgervault_ConfirmEditPartitionResponse;

typedef struct _ledgervault_ConfirmEditPartitionResponse_AdminGroup {
    pb_size_t wApprovers_count;
    pb_bytes_array_t **wApprovers;
    pb_size_t wAdmins_count;
    pb_bytes_array_t **wAdmins;
    pb_size_t newAdmins_count;
    struct _ledgervault_ConfirmEditPartitionResponse_AdminGroup_NewAdmin *newAdmins;
/* @@protoc_insertion_point(struct:ledgervault_ConfirmEditPartitionResponse_AdminGroup) */
} ledgervault_ConfirmEditPartitionResponse_AdminGroup;

typedef struct _ledgervault_ConfirmEditPartitionResponse_AdminGroup_NewAdmin {
    pb_bytes_array_t *wNewAdmin;
    pb_bytes_array_t *keyBlob;
/* @@protoc_insertion_point(struct:ledgervault_ConfirmEditPartitionResponse_AdminGroup_NewAdmin) */
} ledgervault_ConfirmEditPartitionResponse_AdminGroup_NewAdmin;

typedef struct _ledgervault_ConfirmEditUser {
    pb_size_t approversGroupsResponses_count;
    struct _ledgervault_ApproversGroupResponses *approversGroupsResponses;
/* @@protoc_insertion_point(struct:ledgervault_ConfirmEditUser) */
} ledgervault_ConfirmEditUser;

typedef struct _ledgervault_ConfirmEditUserResponse {
    pb_bytes_array_t *wUser;
/* @@protoc_insertion_point(struct:ledgervault_ConfirmEditUserResponse) */
} ledgervault_ConfirmEditUserResponse;

typedef struct _ledgervault_ConfirmRegisterUserResponse {
    pb_bytes_array_t *wUser;
/* @@protoc_insertion_point(struct:ledgervault_ConfirmRegisterUserResponse) */
} ledgervault_ConfirmRegisterUserResponse;

typedef struct _ledgervault_ConvertObjectResponse {
    pb_bytes_array_t *wConvertedObject;
/* @@protoc_insertion_point(struct:ledgervault_ConvertObjectResponse) */
} ledgervault_ConvertObjectResponse;

typedef struct _ledgervault_InitiateSeedProvisioning {
    pb_bytes_array_t *wPartition;
    pb_size_t wAdmins_count;
    pb_bytes_array_t **wAdmins;
    pb_size_t wSharedOwners_count;
    pb_bytes_array_t **wSharedOwners;
/* @@protoc_insertion_point(struct:ledgervault_InitiateSeedProvisioning) */
} ledgervault_InitiateSeedProvisioning;

typedef struct _ledgervault_InitiateSeedProvisioningResponse {
    pb_size_t partitionIndividualBlobs_count;
    struct _ledgervault_ApproverBlob *partitionIndividualBlobs;
/* @@protoc_insertion_point(struct:ledgervault_InitiateSeedProvisioningResponse) */
} ledgervault_InitiateSeedProvisioningResponse;

typedef struct _ledgervault_PrepareEditAccount {
    pb_bytes_array_t *wPartition;
    pb_size_t approversGroups_count;
    struct _ledgervault_ApproversGroup *approversGroups;
    pb_bytes_array_t *wWalletAccountList;
    struct _ledgervault_PrepareEditAccount_WalletUpdate *wallet;
    struct _ledgervault_PrepareEditAccount_AccountUpdate *account;
    pb_bytes_array_t *wAccountRuleSetList;
    pb_size_t accountRuleSets_count;
    struct _ledgervault_PrepareEditAccount_AccountRuleSetUpdate *accountRuleSets;
/* @@protoc_insertion_point(struct:ledgervault_PrepareEditAccount) */
} ledgervault_PrepareEditAccount;

typedef struct _ledgervault_PrepareEditAccountResponse_Response {
    pb_size_t approversGroupsBlobs_count;
    struct _ledgervault_ApproversGroupBlobs *approversGroupsBlobs;
/* @@protoc_insertion_point(struct:ledgervault_PrepareEditAccountResponse_Response) */
} ledgervault_PrepareEditAccountResponse_Response;

typedef struct _ledgervault_PrepareEditAccount_AccountRuleSetUpdate_AccountRule {
    pb_bytes_array_t *wAccountRuleUpdate;
/* @@protoc_insertion_point(struct:ledgervault_PrepareEditAccount_AccountRuleSetUpdate_AccountRule) */
} ledgervault_PrepareEditAccount_AccountRuleSetUpdate_AccountRule;

typedef struct _ledgervault_PrepareEditGroup {
    pb_bytes_array_t *wPartition;
    pb_size_t approversGroups_count;
    struct _ledgervault_ApproversGroup *approversGroups;
    struct _ledgervault_GroupUpdate *group;
    pb_size_t wOperators_count;
    pb_bytes_array_t **wOperators;
    pb_size_t wNewOperators_count;
    pb_bytes_array_t **wNewOperators;
    pb_size_t wToBeRemovedOperators_count;
    pb_bytes_array_t **wToBeRemovedOperators;
/* @@protoc_insertion_point(struct:ledgervault_PrepareEditGroup) */
} ledgervault_PrepareEditGroup;

typedef struct _ledgervault_PrepareEditGroupResponse_Response {
    pb_size_t approversGroupsBlobs_count;
    struct _ledgervault_ApproversGroupBlobs *approversGroupsBlobs;
/* @@protoc_insertion_point(struct:ledgervault_PrepareEditGroupResponse_Response) */
} ledgervault_PrepareEditGroupResponse_Response;

typedef struct _ledgervault_PrepareEditPartitionResponse_Response {
    pb_size_t approversGroupsBlobs_count;
    struct _ledgervault_ApproversGroupBlobs *approversGroupsBlobs;
/* @@protoc_insertion_point(struct:ledgervault_PrepareEditPartitionResponse_Response) */
} ledgervault_PrepareEditPartitionResponse_Response;

typedef struct _ledgervault_PrepareEditUser {
    pb_bytes_array_t *wPartition;
    pb_size_t approversGroups_count;
    struct _ledgervault_ApproversGroup *approversGroups;
    struct _ledgervault_UserUpdate *user;
/* @@protoc_insertion_point(struct:ledgervault_PrepareEditUser) */
} ledgervault_PrepareEditUser;

typedef struct _ledgervault_PrepareEditUserResponse {
    pb_size_t approversGroupsBlobs_count;
    struct _ledgervault_ApproversGroupBlobs *approversGroupsBlobs;
/* @@protoc_insertion_point(struct:ledgervault_PrepareEditUserResponse) */
} ledgervault_PrepareEditUserResponse;

typedef struct _ledgervault_SubmitSeedFragments {
    pb_size_t sharedOwnerResponses_count;
    struct _ledgervault_ApproverResponse *sharedOwnerResponses;
/* @@protoc_insertion_point(struct:ledgervault_SubmitSeedFragments) */
} ledgervault_SubmitSeedFragments;

typedef struct _ledgervault_ApproverBlob {
    pb_byte_t ephemeralPublicKey[65];
    ledgervault_Certificate ephemeralPublicKeyAttestation;
    pb_bytes_array_t *blob;
/* @@protoc_insertion_point(struct:ledgervault_ApproverBlob) */
} ledgervault_ApproverBlob;

typedef struct _ledgervault_ConfirmRegisterUser {
    pb_bytes_array_t *userDescriptionBlob;
    pb_bytes_array_t *u2fRegisterResp;
    pb_byte_t validationKey[65];
    ledgervault_Certificate validationKeyAttestation;
/* @@protoc_insertion_point(struct:ledgervault_ConfirmRegisterUser) */
} ledgervault_ConfirmRegisterUser;

typedef struct _ledgervault_ConvertObject {
    pb_bytes_array_t *wAccount;
    pb_bytes_array_t *wAccountRuleSet;
    ledgervault_ConvertObject_TargetType target;
    pb_bytes_array_t *wObject;
    struct _ledgervault_TrustedScript *trustedTarget;
/* @@protoc_insertion_point(struct:ledgervault_ConvertObject) */
} ledgervault_ConvertObject;

typedef struct _ledgervault_GroupUpdate {
    pb_bytes_array_t *wGroup;
    char *name;
    bool revoked;
/* @@protoc_insertion_point(struct:ledgervault_GroupUpdate) */
} ledgervault_GroupUpdate;

typedef struct _ledgervault_PrepareEditAccountResponse {
    pb_size_t which_one;
    union {
        ledgervault_ConfirmEditAccountResponse directResponse;
        ledgervault_PrepareEditAccountResponse_Response response;
    };
/* @@protoc_insertion_point(struct:ledgervault_PrepareEditAccountResponse) */
} ledgervault_PrepareEditAccountResponse;

typedef struct _ledgervault_PrepareEditAccount_AccountRuleSetUpdate {
    pb_bytes_array_t *wAccountRuleSet;
    char *name;
    struct _ledgervault_TrustedScript *matcherScriptId;
    pb_size_t accountRules_count;
    struct _ledgervault_PrepareEditAccount_AccountRuleSetUpdate_AccountRule *accountRules;
    bool archived;
/* @@protoc_insertion_point(struct:ledgervault_PrepareEditAccount_AccountRuleSetUpdate) */
} ledgervault_PrepareEditAccount_AccountRuleSetUpdate;

typedef struct _ledgervault_PrepareEditAccount_AccountUpdate {
    pb_bytes_array_t *wAccount;
    char *name;
    pb_size_t which_opt_currencyScriptType;
    union {
        ledgervault_CurrencyScriptType currencyScriptType;
    };
    struct _ledgervault_TrustedScript *currencyScriptId;
    pb_bytes_array_t *currencyScriptParameters;
    pb_bytes_array_t *currencyScriptParametersSignature;
    bool archived;
/* @@protoc_insertion_point(struct:ledgervault_PrepareEditAccount_AccountUpdate) */
} ledgervault_PrepareEditAccount_AccountUpdate;

typedef struct _ledgervault_PrepareEditAccount_WalletUpdate {
    pb_bytes_array_t *wWallet;
    char *name;
    struct _ledgervault_Bip32Path *bip32path;
    bool archived;
/* @@protoc_insertion_point(struct:ledgervault_PrepareEditAccount_WalletUpdate) */
} ledgervault_PrepareEditAccount_WalletUpdate;

typedef struct _ledgervault_PrepareEditGroupResponse {
    pb_size_t which_one;
    union {
        ledgervault_ConfirmEditGroupResponse directResponse;
        ledgervault_PrepareEditGroupResponse_Response response;
    };
/* @@protoc_insertion_point(struct:ledgervault_PrepareEditGroupResponse) */
} ledgervault_PrepareEditGroupResponse;

typedef struct _ledgervault_PrepareEditPartition {
    pb_bytes_array_t *wPartition;
    char *workspaceName;
    pb_size_t adminGroups_count;
    struct _ledgervault_PrepareEditPartition_AdminGroup *adminGroups;
    bool bootstrapEnabled;
    pb_size_t sharedOwners_count;
    struct _ledgervault_UserUpdate *sharedOwners;
/* @@protoc_insertion_point(struct:ledgervault_PrepareEditPartition) */
} ledgervault_PrepareEditPartition;

typedef struct _ledgervault_PrepareEditPartitionResponse {
    pb_size_t which_one;
    union {
        ledgervault_ConfirmEditPartitionResponse bootstrapResponse;
        ledgervault_PrepareEditPartitionResponse_Response response;
    };
/* @@protoc_insertion_point(struct:ledgervault_PrepareEditPartitionResponse) */
} ledgervault_PrepareEditPartitionResponse;

typedef struct _ledgervault_PrepareEditPartition_AdminGroup {
    char *name;
    uint32_t policyM;
    uint32_t policyM_ReadOnlyWallet;
    pb_size_t approvers_count;
    struct _ledgervault_UserUpdate *approvers;
    pb_size_t admins_count;
    struct _ledgervault_UserUpdate *admins;
    pb_size_t newAdmins_count;
    struct _ledgervault_UserUpdate *newAdmins;
/* @@protoc_insertion_point(struct:ledgervault_PrepareEditPartition_AdminGroup) */
} ledgervault_PrepareEditPartition_AdminGroup;

typedef struct _ledgervault_PrepareRegisterUser {
    pb_bytes_array_t *wPartition;
    pb_byte_t confidentialityKey[65];
    ledgervault_Certificate confidentialityKeyAttestation;
/* @@protoc_insertion_point(struct:ledgervault_PrepareRegisterUser) */
} ledgervault_PrepareRegisterUser;

typedef struct _ledgervault_PrepareRegisterUserResponse {
    pb_byte_t challenge[32];
    pb_byte_t ephemeralPublicKey[65];
    ledgervault_Certificate ephemeralPublicKeyAttestation;
    pb_bytes_array_t *u2fRegisterData;
/* @@protoc_insertion_point(struct:ledgervault_PrepareRegisterUserResponse) */
} ledgervault_PrepareRegisterUserResponse;

typedef PB_BYTES_ARRAY_T(32) ledgervault_SubmitSeedFragmentsResponse_seedChecksum_t;
typedef struct _ledgervault_SubmitSeedFragmentsResponse {
    pb_bytes_array_t *wPartition;
    ledgervault_SubmitSeedFragmentsResponse_seedChecksum_t seedChecksum;
/* @@protoc_insertion_point(struct:ledgervault_SubmitSeedFragmentsResponse) */
} ledgervault_SubmitSeedFragmentsResponse;

typedef struct _ledgervault_UserUpdate {
    pb_bytes_array_t *wUser;
    char *name;
    bool revoked;
/* @@protoc_insertion_point(struct:ledgervault_UserUpdate) */
} ledgervault_UserUpdate;

typedef struct _ledgervault_AccountManagerRequest {
    pb_size_t which_one;
    union {
        ledgervault_PrepareRegisterUser PrepareRegisterUser;
        ledgervault_ConfirmRegisterUser ConfirmRegisterUser;
        ledgervault_PrepareEditPartition PrepareEditPartition;
        ledgervault_ConfirmEditPartition ConfirmEditPartition;
        ledgervault_InitiateSeedProvisioning InitiateSeedProvisioning;
        ledgervault_SubmitSeedFragments SubmitSeedFragments;
        ledgervault_PrepareEditGroup PrepareEditGroup;
        ledgervault_ConfirmEditGroup ConfirmEditGroup;
        ledgervault_PrepareEditUser PrepareEditUser;
        ledgervault_ConfirmEditUser ConfirmEditUser;
        ledgervault_PrepareEditAccount PrepareEditAccount;
        ledgervault_ConfirmEditAccount ConfirmEditAccount;
        ledgervault_ConvertObject ConvertObject;
    };
/* @@protoc_insertion_point(struct:ledgervault_AccountManagerRequest) */
} ledgervault_AccountManagerRequest;

typedef struct _ledgervault_AccountManagerResponse {
    pb_size_t which_one;
    union {
        ledgervault_PrepareRegisterUserResponse PrepareRegisterUserResponse;
        ledgervault_ConfirmRegisterUserResponse ConfirmRegisterUserResponse;
        ledgervault_PrepareEditPartitionResponse PrepareEditPartitionResponse;
        ledgervault_ConfirmEditPartitionResponse ConfirmEditPartitionResponse;
        ledgervault_InitiateSeedProvisioningResponse InitiateSeedProvisioningResponse;
        ledgervault_SubmitSeedFragmentsResponse SubmitSeedFragmentsResponse;
        ledgervault_PrepareEditGroupResponse PrepareEditGroupResponse;
        ledgervault_ConfirmEditGroupResponse ConfirmEditGroupResponse;
        ledgervault_PrepareEditUserResponse PrepareEditUserResponse;
        ledgervault_ConfirmEditUserResponse ConfirmEditUserResponse;
        ledgervault_PrepareEditAccountResponse PrepareEditAccountResponse;
        ledgervault_ConfirmEditAccountResponse ConfirmEditAccountResponse;
        ledgervault_ConvertObjectResponse ConvertObjectResponse;
        ledgervault_ExceptionResponse ExceptionResponse;
    };
/* @@protoc_insertion_point(struct:ledgervault_AccountManagerResponse) */
} ledgervault_AccountManagerResponse;

/* Default values for struct fields */

/* Initializer values for message structs */
#define ledgervault_UserUpdate_init_default      {NULL, NULL, 0}
#define ledgervault_ApproverBlob_init_default    {{0}, ledgervault_Certificate_init_default, NULL}
#define ledgervault_ApproverResponse_init_default {NULL, NULL, NULL}
#define ledgervault_GroupUpdate_init_default     {NULL, NULL, 0}
#define ledgervault_ApproversGroup_init_default  {0, NULL}
#define ledgervault_ApproversGroupBlobs_init_default {0, NULL}
#define ledgervault_ApproversGroupResponses_init_default {0, NULL}
#define ledgervault_PrepareEditPartition_init_default {NULL, NULL, 0, NULL, 0, 0, NULL}
#define ledgervault_PrepareEditPartition_AdminGroup_init_default {NULL, 0, 0, 0, NULL, 0, NULL, 0, NULL}
#define ledgervault_PrepareEditPartitionResponse_init_default {0, {ledgervault_ConfirmEditPartitionResponse_init_default}}
#define ledgervault_PrepareEditPartitionResponse_Response_init_default {0, NULL}
#define ledgervault_ConfirmEditPartition_init_default {0, NULL}
#define ledgervault_ConfirmEditPartitionResponse_init_default {NULL, 0, NULL}
#define ledgervault_ConfirmEditPartitionResponse_AdminGroup_init_default {0, NULL, 0, NULL, 0, NULL}
#define ledgervault_ConfirmEditPartitionResponse_AdminGroup_NewAdmin_init_default {NULL, NULL}
#define ledgervault_PrepareRegisterUser_init_default {NULL, {0}, ledgervault_Certificate_init_default}
#define ledgervault_PrepareRegisterUserResponse_init_default {{0}, {0}, ledgervault_Certificate_init_default, NULL}
#define ledgervault_ConfirmRegisterUser_init_default {NULL, NULL, {0}, ledgervault_Certificate_init_default}
#define ledgervault_ConfirmRegisterUserResponse_init_default {NULL}
#define ledgervault_PrepareEditGroup_init_default {NULL, 0, NULL, NULL, 0, NULL, 0, NULL, 0, NULL}
#define ledgervault_PrepareEditGroupResponse_init_default {0, {ledgervault_ConfirmEditGroupResponse_init_default}}
#define ledgervault_PrepareEditGroupResponse_Response_init_default {0, NULL}
#define ledgervault_ConfirmEditGroup_init_default {0, NULL}
#define ledgervault_ConfirmEditGroupResponse_init_default {NULL, 0, NULL}
#define ledgervault_PrepareEditUser_init_default {NULL, 0, NULL, NULL}
#define ledgervault_PrepareEditUserResponse_init_default {0, NULL}
#define ledgervault_ConfirmEditUser_init_default {0, NULL}
#define ledgervault_ConfirmEditUserResponse_init_default {NULL}
#define ledgervault_PrepareEditAccount_init_default {NULL, 0, NULL, NULL, NULL, NULL, NULL, 0, NULL}
#define ledgervault_PrepareEditAccount_WalletUpdate_init_default {NULL, NULL, NULL, 0}
#define ledgervault_PrepareEditAccount_AccountUpdate_init_default {NULL, NULL, 0, {(ledgervault_CurrencyScriptType)0}, NULL, NULL, NULL, 0}
#define ledgervault_PrepareEditAccount_AccountRuleSetUpdate_init_default {NULL, NULL, NULL, 0, NULL, 0}
#define ledgervault_PrepareEditAccount_AccountRuleSetUpdate_AccountRule_init_default {NULL}
#define ledgervault_PrepareEditAccountResponse_init_default {0, {ledgervault_ConfirmEditAccountResponse_init_default}}
#define ledgervault_PrepareEditAccountResponse_Response_init_default {0, NULL}
#define ledgervault_ConfirmEditAccount_init_default {0, NULL}
#define ledgervault_ConfirmEditAccountResponse_init_default {NULL, NULL, NULL, 0, NULL, NULL}
#define ledgervault_ConvertObject_init_default   {NULL, NULL, (ledgervault_ConvertObject_TargetType)0, NULL, NULL}
#define ledgervault_ConvertObjectResponse_init_default {NULL}
#define ledgervault_InitiateSeedProvisioning_init_default {NULL, 0, NULL, 0, NULL}
#define ledgervault_InitiateSeedProvisioningResponse_init_default {0, NULL}
#define ledgervault_SubmitSeedFragments_init_default {0, NULL}
#define ledgervault_SubmitSeedFragmentsResponse_init_default {NULL, {0, {0}}}
#define ledgervault_AccountManagerRequest_init_default {0, {ledgervault_PrepareRegisterUser_init_default}}
#define ledgervault_AccountManagerResponse_init_default {0, {ledgervault_PrepareRegisterUserResponse_init_default}}
#define ledgervault_UserUpdate_init_zero         {NULL, NULL, 0}
#define ledgervault_ApproverBlob_init_zero       {{0}, ledgervault_Certificate_init_zero, NULL}
#define ledgervault_ApproverResponse_init_zero   {NULL, NULL, NULL}
#define ledgervault_GroupUpdate_init_zero        {NULL, NULL, 0}
#define ledgervault_ApproversGroup_init_zero     {0, NULL}
#define ledgervault_ApproversGroupBlobs_init_zero {0, NULL}
#define ledgervault_ApproversGroupResponses_init_zero {0, NULL}
#define ledgervault_PrepareEditPartition_init_zero {NULL, NULL, 0, NULL, 0, 0, NULL}
#define ledgervault_PrepareEditPartition_AdminGroup_init_zero {NULL, 0, 0, 0, NULL, 0, NULL, 0, NULL}
#define ledgervault_PrepareEditPartitionResponse_init_zero {0, {ledgervault_ConfirmEditPartitionResponse_init_zero}}
#define ledgervault_PrepareEditPartitionResponse_Response_init_zero {0, NULL}
#define ledgervault_ConfirmEditPartition_init_zero {0, NULL}
#define ledgervault_ConfirmEditPartitionResponse_init_zero {NULL, 0, NULL}
#define ledgervault_ConfirmEditPartitionResponse_AdminGroup_init_zero {0, NULL, 0, NULL, 0, NULL}
#define ledgervault_ConfirmEditPartitionResponse_AdminGroup_NewAdmin_init_zero {NULL, NULL}
#define ledgervault_PrepareRegisterUser_init_zero {NULL, {0}, ledgervault_Certificate_init_zero}
#define ledgervault_PrepareRegisterUserResponse_init_zero {{0}, {0}, ledgervault_Certificate_init_zero, NULL}
#define ledgervault_ConfirmRegisterUser_init_zero {NULL, NULL, {0}, ledgervault_Certificate_init_zero}
#define ledgervault_ConfirmRegisterUserResponse_init_zero {NULL}
#define ledgervault_PrepareEditGroup_init_zero   {NULL, 0, NULL, NULL, 0, NULL, 0, NULL, 0, NULL}
#define ledgervault_PrepareEditGroupResponse_init_zero {0, {ledgervault_ConfirmEditGroupResponse_init_zero}}
#define ledgervault_PrepareEditGroupResponse_Response_init_zero {0, NULL}
#define ledgervault_ConfirmEditGroup_init_zero   {0, NULL}
#define ledgervault_ConfirmEditGroupResponse_init_zero {NULL, 0, NULL}
#define ledgervault_PrepareEditUser_init_zero    {NULL, 0, NULL, NULL}
#define ledgervault_PrepareEditUserResponse_init_zero {0, NULL}
#define ledgervault_ConfirmEditUser_init_zero    {0, NULL}
#define ledgervault_ConfirmEditUserResponse_init_zero {NULL}
#define ledgervault_PrepareEditAccount_init_zero {NULL, 0, NULL, NULL, NULL, NULL, NULL, 0, NULL}
#define ledgervault_PrepareEditAccount_WalletUpdate_init_zero {NULL, NULL, NULL, 0}
#define ledgervault_PrepareEditAccount_AccountUpdate_init_zero {NULL, NULL, 0, {(ledgervault_CurrencyScriptType)0}, NULL, NULL, NULL, 0}
#define ledgervault_PrepareEditAccount_AccountRuleSetUpdate_init_zero {NULL, NULL, NULL, 0, NULL, 0}
#define ledgervault_PrepareEditAccount_AccountRuleSetUpdate_AccountRule_init_zero {NULL}
#define ledgervault_PrepareEditAccountResponse_init_zero {0, {ledgervault_ConfirmEditAccountResponse_init_zero}}
#define ledgervault_PrepareEditAccountResponse_Response_init_zero {0, NULL}
#define ledgervault_ConfirmEditAccount_init_zero {0, NULL}
#define ledgervault_ConfirmEditAccountResponse_init_zero {NULL, NULL, NULL, 0, NULL, NULL}
#define ledgervault_ConvertObject_init_zero      {NULL, NULL, (ledgervault_ConvertObject_TargetType)0, NULL, NULL}
#define ledgervault_ConvertObjectResponse_init_zero {NULL}
#define ledgervault_InitiateSeedProvisioning_init_zero {NULL, 0, NULL, 0, NULL}
#define ledgervault_InitiateSeedProvisioningResponse_init_zero {0, NULL}
#define ledgervault_SubmitSeedFragments_init_zero {0, NULL}
#define ledgervault_SubmitSeedFragmentsResponse_init_zero {NULL, {0, {0}}}
#define ledgervault_AccountManagerRequest_init_zero {0, {ledgervault_PrepareRegisterUser_init_zero}}
#define ledgervault_AccountManagerResponse_init_zero {0, {ledgervault_PrepareRegisterUserResponse_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define ledgervault_ApproverResponse_wApprover_tag 1
#define ledgervault_ApproverResponse_challengeResponse_tag 2
#define ledgervault_ApproverResponse_approverBlob_tag 3
#define ledgervault_ApproversGroup_wApprovers_tag 1
#define ledgervault_ApproversGroupBlobs_approversBlob_tag 1
#define ledgervault_ApproversGroupResponses_approversResponse_tag 1
#define ledgervault_ConfirmEditAccount_approversGroupsResponses_tag 1
#define ledgervault_ConfirmEditAccountResponse_wPartition_tag 1
#define ledgervault_ConfirmEditAccountResponse_wWallet_tag 2
#define ledgervault_ConfirmEditAccountResponse_wAccount_tag 3
#define ledgervault_ConfirmEditAccountResponse_wAccountRuleSet_tag 4
#define ledgervault_ConfirmEditAccountResponse_wWalletAccountList_tag 5
#define ledgervault_ConfirmEditGroup_approversGroupsResponses_tag 1
#define ledgervault_ConfirmEditGroupResponse_wGroup_tag 1
#define ledgervault_ConfirmEditGroupResponse_keyBlob_tag 2
#define ledgervault_ConfirmEditPartition_approversGroupsResponses_tag 1
#define ledgervault_ConfirmEditPartitionResponse_wPartition_tag 1
#define ledgervault_ConfirmEditPartitionResponse_adminGroups_tag 2
#define ledgervault_ConfirmEditPartitionResponse_AdminGroup_wApprovers_tag 1
#define ledgervault_ConfirmEditPartitionResponse_AdminGroup_wAdmins_tag 2
#define ledgervault_ConfirmEditPartitionResponse_AdminGroup_newAdmins_tag 3
#define ledgervault_ConfirmEditPartitionResponse_AdminGroup_NewAdmin_wNewAdmin_tag 1
#define ledgervault_ConfirmEditPartitionResponse_AdminGroup_NewAdmin_keyBlob_tag 2
#define ledgervault_ConfirmEditUser_approversGroupsResponses_tag 1
#define ledgervault_ConfirmEditUserResponse_wUser_tag 1
#define ledgervault_ConfirmRegisterUserResponse_wUser_tag 1
#define ledgervault_ConvertObjectResponse_wConvertedObject_tag 1
#define ledgervault_InitiateSeedProvisioning_wPartition_tag 1
#define ledgervault_InitiateSeedProvisioning_wAdmins_tag 2
#define ledgervault_InitiateSeedProvisioning_wSharedOwners_tag 3
#define ledgervault_InitiateSeedProvisioningResponse_partitionIndividualBlobs_tag 1
#define ledgervault_PrepareEditAccount_wPartition_tag 1
#define ledgervault_PrepareEditAccount_approversGroups_tag 2
#define ledgervault_PrepareEditAccount_wWalletAccountList_tag 3
#define ledgervault_PrepareEditAccount_wallet_tag 4
#define ledgervault_PrepareEditAccount_account_tag 5
#define ledgervault_PrepareEditAccount_wAccountRuleSetList_tag 6
#define ledgervault_PrepareEditAccount_accountRuleSets_tag 7
#define ledgervault_PrepareEditAccountResponse_Response_approversGroupsBlobs_tag 1
#define ledgervault_PrepareEditAccount_AccountRuleSetUpdate_AccountRule_wAccountRuleUpdate_tag 1
#define ledgervault_PrepareEditGroup_wPartition_tag 1
#define ledgervault_PrepareEditGroup_approversGroups_tag 2
#define ledgervault_PrepareEditGroup_group_tag   3
#define ledgervault_PrepareEditGroup_wOperators_tag 4
#define ledgervault_PrepareEditGroup_wNewOperators_tag 5
#define ledgervault_PrepareEditGroup_wToBeRemovedOperators_tag 6
#define ledgervault_PrepareEditGroupResponse_Response_approversGroupsBlobs_tag 2
#define ledgervault_PrepareEditPartitionResponse_Response_approversGroupsBlobs_tag 1
#define ledgervault_PrepareEditUser_wPartition_tag 1
#define ledgervault_PrepareEditUser_approversGroups_tag 2
#define ledgervault_PrepareEditUser_user_tag     3
#define ledgervault_PrepareEditUserResponse_approversGroupsBlobs_tag 1
#define ledgervault_SubmitSeedFragments_sharedOwnerResponses_tag 1
#define ledgervault_ApproverBlob_ephemeralPublicKey_tag 1
#define ledgervault_ApproverBlob_ephemeralPublicKeyAttestation_tag 2
#define ledgervault_ApproverBlob_blob_tag        3
#define ledgervault_ConfirmRegisterUser_userDescriptionBlob_tag 1
#define ledgervault_ConfirmRegisterUser_u2fRegisterResp_tag 2
#define ledgervault_ConfirmRegisterUser_validationKey_tag 3
#define ledgervault_ConfirmRegisterUser_validationKeyAttestation_tag 4
#define ledgervault_ConvertObject_wAccount_tag   1
#define ledgervault_ConvertObject_wAccountRuleSet_tag 2
#define ledgervault_ConvertObject_target_tag     3
#define ledgervault_ConvertObject_wObject_tag    4
#define ledgervault_ConvertObject_trustedTarget_tag 5
#define ledgervault_GroupUpdate_wGroup_tag       1
#define ledgervault_GroupUpdate_name_tag         2
#define ledgervault_GroupUpdate_revoked_tag      3
#define ledgervault_PrepareEditAccountResponse_directResponse_tag 1
#define ledgervault_PrepareEditAccountResponse_response_tag 2
#define ledgervault_PrepareEditAccount_AccountRuleSetUpdate_wAccountRuleSet_tag 1
#define ledgervault_PrepareEditAccount_AccountRuleSetUpdate_name_tag 2
#define ledgervault_PrepareEditAccount_AccountRuleSetUpdate_matcherScriptId_tag 3
#define ledgervault_PrepareEditAccount_AccountRuleSetUpdate_accountRules_tag 4
#define ledgervault_PrepareEditAccount_AccountRuleSetUpdate_archived_tag 5
#define ledgervault_PrepareEditAccount_AccountUpdate_currencyScriptType_tag 3
#define ledgervault_PrepareEditAccount_AccountUpdate_wAccount_tag 1
#define ledgervault_PrepareEditAccount_AccountUpdate_name_tag 2
#define ledgervault_PrepareEditAccount_AccountUpdate_currencyScriptId_tag 4
#define ledgervault_PrepareEditAccount_AccountUpdate_currencyScriptParameters_tag 5
#define ledgervault_PrepareEditAccount_AccountUpdate_currencyScriptParametersSignature_tag 6
#define ledgervault_PrepareEditAccount_AccountUpdate_archived_tag 7
#define ledgervault_PrepareEditAccount_WalletUpdate_wWallet_tag 1
#define ledgervault_PrepareEditAccount_WalletUpdate_name_tag 2
#define ledgervault_PrepareEditAccount_WalletUpdate_bip32path_tag 3
#define ledgervault_PrepareEditAccount_WalletUpdate_archived_tag 4
#define ledgervault_PrepareEditGroupResponse_directResponse_tag 1
#define ledgervault_PrepareEditGroupResponse_response_tag 2
#define ledgervault_PrepareEditPartition_wPartition_tag 1
#define ledgervault_PrepareEditPartition_workspaceName_tag 2
#define ledgervault_PrepareEditPartition_adminGroups_tag 3
#define ledgervault_PrepareEditPartition_bootstrapEnabled_tag 4
#define ledgervault_PrepareEditPartition_sharedOwners_tag 7
#define ledgervault_PrepareEditPartitionResponse_bootstrapResponse_tag 1
#define ledgervault_PrepareEditPartitionResponse_response_tag 2
#define ledgervault_PrepareEditPartition_AdminGroup_name_tag 1
#define ledgervault_PrepareEditPartition_AdminGroup_policyM_tag 2
#define ledgervault_PrepareEditPartition_AdminGroup_policyM_ReadOnlyWallet_tag 3
#define ledgervault_PrepareEditPartition_AdminGroup_approvers_tag 4
#define ledgervault_PrepareEditPartition_AdminGroup_admins_tag 5
#define ledgervault_PrepareEditPartition_AdminGroup_newAdmins_tag 6
#define ledgervault_PrepareRegisterUser_wPartition_tag 1
#define ledgervault_PrepareRegisterUser_confidentialityKey_tag 2
#define ledgervault_PrepareRegisterUser_confidentialityKeyAttestation_tag 3
#define ledgervault_PrepareRegisterUserResponse_challenge_tag 1
#define ledgervault_PrepareRegisterUserResponse_ephemeralPublicKey_tag 2
#define ledgervault_PrepareRegisterUserResponse_ephemeralPublicKeyAttestation_tag 3
#define ledgervault_PrepareRegisterUserResponse_u2fRegisterData_tag 5
#define ledgervault_SubmitSeedFragmentsResponse_wPartition_tag 1
#define ledgervault_SubmitSeedFragmentsResponse_seedChecksum_tag 2
#define ledgervault_UserUpdate_wUser_tag         1
#define ledgervault_UserUpdate_name_tag          2
#define ledgervault_UserUpdate_revoked_tag       3
#define ledgervault_AccountManagerRequest_PrepareRegisterUser_tag 1
#define ledgervault_AccountManagerRequest_ConfirmRegisterUser_tag 2
#define ledgervault_AccountManagerRequest_PrepareEditPartition_tag 3
#define ledgervault_AccountManagerRequest_ConfirmEditPartition_tag 4
#define ledgervault_AccountManagerRequest_InitiateSeedProvisioning_tag 5
#define ledgervault_AccountManagerRequest_SubmitSeedFragments_tag 6
#define ledgervault_AccountManagerRequest_PrepareEditGroup_tag 7
#define ledgervault_AccountManagerRequest_ConfirmEditGroup_tag 8
#define ledgervault_AccountManagerRequest_PrepareEditUser_tag 9
#define ledgervault_AccountManagerRequest_ConfirmEditUser_tag 10
#define ledgervault_AccountManagerRequest_PrepareEditAccount_tag 11
#define ledgervault_AccountManagerRequest_ConfirmEditAccount_tag 12
#define ledgervault_AccountManagerRequest_ConvertObject_tag 13
#define ledgervault_AccountManagerResponse_PrepareRegisterUserResponse_tag 1
#define ledgervault_AccountManagerResponse_ConfirmRegisterUserResponse_tag 2
#define ledgervault_AccountManagerResponse_PrepareEditPartitionResponse_tag 3
#define ledgervault_AccountManagerResponse_ConfirmEditPartitionResponse_tag 4
#define ledgervault_AccountManagerResponse_InitiateSeedProvisioningResponse_tag 5
#define ledgervault_AccountManagerResponse_SubmitSeedFragmentsResponse_tag 6
#define ledgervault_AccountManagerResponse_PrepareEditGroupResponse_tag 7
#define ledgervault_AccountManagerResponse_ConfirmEditGroupResponse_tag 8
#define ledgervault_AccountManagerResponse_PrepareEditUserResponse_tag 9
#define ledgervault_AccountManagerResponse_ConfirmEditUserResponse_tag 10
#define ledgervault_AccountManagerResponse_PrepareEditAccountResponse_tag 11
#define ledgervault_AccountManagerResponse_ConfirmEditAccountResponse_tag 12
#define ledgervault_AccountManagerResponse_ConvertObjectResponse_tag 13
#define ledgervault_AccountManagerResponse_ExceptionResponse_tag 999

/* Struct field encoding specification for nanopb */
extern const pb_field_t ledgervault_UserUpdate_fields[4];
extern const pb_field_t ledgervault_ApproverBlob_fields[4];
extern const pb_field_t ledgervault_ApproverResponse_fields[4];
extern const pb_field_t ledgervault_GroupUpdate_fields[4];
extern const pb_field_t ledgervault_ApproversGroup_fields[2];
extern const pb_field_t ledgervault_ApproversGroupBlobs_fields[2];
extern const pb_field_t ledgervault_ApproversGroupResponses_fields[2];
extern const pb_field_t ledgervault_PrepareEditPartition_fields[6];
extern const pb_field_t ledgervault_PrepareEditPartition_AdminGroup_fields[7];
extern const pb_field_t ledgervault_PrepareEditPartitionResponse_fields[3];
extern const pb_field_t ledgervault_PrepareEditPartitionResponse_Response_fields[2];
extern const pb_field_t ledgervault_ConfirmEditPartition_fields[2];
extern const pb_field_t ledgervault_ConfirmEditPartitionResponse_fields[3];
extern const pb_field_t ledgervault_ConfirmEditPartitionResponse_AdminGroup_fields[4];
extern const pb_field_t ledgervault_ConfirmEditPartitionResponse_AdminGroup_NewAdmin_fields[3];
extern const pb_field_t ledgervault_PrepareRegisterUser_fields[4];
extern const pb_field_t ledgervault_PrepareRegisterUserResponse_fields[5];
extern const pb_field_t ledgervault_ConfirmRegisterUser_fields[5];
extern const pb_field_t ledgervault_ConfirmRegisterUserResponse_fields[2];
extern const pb_field_t ledgervault_PrepareEditGroup_fields[7];
extern const pb_field_t ledgervault_PrepareEditGroupResponse_fields[3];
extern const pb_field_t ledgervault_PrepareEditGroupResponse_Response_fields[2];
extern const pb_field_t ledgervault_ConfirmEditGroup_fields[2];
extern const pb_field_t ledgervault_ConfirmEditGroupResponse_fields[3];
extern const pb_field_t ledgervault_PrepareEditUser_fields[4];
extern const pb_field_t ledgervault_PrepareEditUserResponse_fields[2];
extern const pb_field_t ledgervault_ConfirmEditUser_fields[2];
extern const pb_field_t ledgervault_ConfirmEditUserResponse_fields[2];
extern const pb_field_t ledgervault_PrepareEditAccount_fields[8];
extern const pb_field_t ledgervault_PrepareEditAccount_WalletUpdate_fields[5];
extern const pb_field_t ledgervault_PrepareEditAccount_AccountUpdate_fields[8];
extern const pb_field_t ledgervault_PrepareEditAccount_AccountRuleSetUpdate_fields[6];
extern const pb_field_t ledgervault_PrepareEditAccount_AccountRuleSetUpdate_AccountRule_fields[2];
extern const pb_field_t ledgervault_PrepareEditAccountResponse_fields[3];
extern const pb_field_t ledgervault_PrepareEditAccountResponse_Response_fields[2];
extern const pb_field_t ledgervault_ConfirmEditAccount_fields[2];
extern const pb_field_t ledgervault_ConfirmEditAccountResponse_fields[6];
extern const pb_field_t ledgervault_ConvertObject_fields[6];
extern const pb_field_t ledgervault_ConvertObjectResponse_fields[2];
extern const pb_field_t ledgervault_InitiateSeedProvisioning_fields[4];
extern const pb_field_t ledgervault_InitiateSeedProvisioningResponse_fields[2];
extern const pb_field_t ledgervault_SubmitSeedFragments_fields[2];
extern const pb_field_t ledgervault_SubmitSeedFragmentsResponse_fields[3];
extern const pb_field_t ledgervault_AccountManagerRequest_fields[14];
extern const pb_field_t ledgervault_AccountManagerResponse_fields[15];

/* Maximum encoded size of messages (where known) */
/* ledgervault_UserUpdate_size depends on runtime parameters */
/* ledgervault_ApproverBlob_size depends on runtime parameters */
/* ledgervault_ApproverResponse_size depends on runtime parameters */
/* ledgervault_GroupUpdate_size depends on runtime parameters */
/* ledgervault_ApproversGroup_size depends on runtime parameters */
/* ledgervault_ApproversGroupBlobs_size depends on runtime parameters */
/* ledgervault_ApproversGroupResponses_size depends on runtime parameters */
/* ledgervault_PrepareEditPartition_size depends on runtime parameters */
/* ledgervault_PrepareEditPartition_AdminGroup_size depends on runtime parameters */
/* ledgervault_PrepareEditPartitionResponse_size depends on runtime parameters */
/* ledgervault_PrepareEditPartitionResponse_Response_size depends on runtime parameters */
/* ledgervault_ConfirmEditPartition_size depends on runtime parameters */
/* ledgervault_ConfirmEditPartitionResponse_size depends on runtime parameters */
/* ledgervault_ConfirmEditPartitionResponse_AdminGroup_size depends on runtime parameters */
/* ledgervault_ConfirmEditPartitionResponse_AdminGroup_NewAdmin_size depends on runtime parameters */
/* ledgervault_PrepareRegisterUser_size depends on runtime parameters */
/* ledgervault_PrepareRegisterUserResponse_size depends on runtime parameters */
/* ledgervault_ConfirmRegisterUser_size depends on runtime parameters */
/* ledgervault_ConfirmRegisterUserResponse_size depends on runtime parameters */
/* ledgervault_PrepareEditGroup_size depends on runtime parameters */
/* ledgervault_PrepareEditGroupResponse_size depends on runtime parameters */
/* ledgervault_PrepareEditGroupResponse_Response_size depends on runtime parameters */
/* ledgervault_ConfirmEditGroup_size depends on runtime parameters */
/* ledgervault_ConfirmEditGroupResponse_size depends on runtime parameters */
/* ledgervault_PrepareEditUser_size depends on runtime parameters */
/* ledgervault_PrepareEditUserResponse_size depends on runtime parameters */
/* ledgervault_ConfirmEditUser_size depends on runtime parameters */
/* ledgervault_ConfirmEditUserResponse_size depends on runtime parameters */
/* ledgervault_PrepareEditAccount_size depends on runtime parameters */
/* ledgervault_PrepareEditAccount_WalletUpdate_size depends on runtime parameters */
/* ledgervault_PrepareEditAccount_AccountUpdate_size depends on runtime parameters */
/* ledgervault_PrepareEditAccount_AccountRuleSetUpdate_size depends on runtime parameters */
/* ledgervault_PrepareEditAccount_AccountRuleSetUpdate_AccountRule_size depends on runtime parameters */
/* ledgervault_PrepareEditAccountResponse_size depends on runtime parameters */
/* ledgervault_PrepareEditAccountResponse_Response_size depends on runtime parameters */
/* ledgervault_ConfirmEditAccount_size depends on runtime parameters */
/* ledgervault_ConfirmEditAccountResponse_size depends on runtime parameters */
/* ledgervault_ConvertObject_size depends on runtime parameters */
/* ledgervault_ConvertObjectResponse_size depends on runtime parameters */
/* ledgervault_InitiateSeedProvisioning_size depends on runtime parameters */
/* ledgervault_InitiateSeedProvisioningResponse_size depends on runtime parameters */
/* ledgervault_SubmitSeedFragments_size depends on runtime parameters */
/* ledgervault_SubmitSeedFragmentsResponse_size depends on runtime parameters */
/* ledgervault_AccountManagerRequest_size depends on runtime parameters */
/* ledgervault_AccountManagerResponse_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define ACCOUNTMANAGER_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
